#ifndef SHADER_SHIT
#define SHADER_SHIT
const char* vertex = "#version 330 core\n\nlayout (location = 0) in vec2 a_vec;\n\nout vec2 tex_coords;\n\n\n\nuniform mat4 u_model;\nuniform mat4 u_projection;\n\nvoid main ()\n{\n    tex_coords = 1.0 - a_vec;\n\n    gl_Position = u_projection * u_model * vec4 (a_vec, 0.0, 1.0);\n}\n";
const char* fragment = "#version 330 core\n\nin vec2 tex_coords;\n\nout vec4 color;\n\nuniform vec4      u_offset;\nuniform sampler2D u_image;\n\nuniform bool u_flip_x = false;\nuniform bool u_flip_y = true;\n\nuniform int  u_type  = 0;\nuniform vec4 u_color = vec4 (0, 0, 0, 1);\n\nuniform float u_radius    = 0.15;\nuniform float u_intensity = 0.01;\n\nuniform float u_alpha = 1.0;\n\nvoid main ()\n{\n    if (u_type == 0)\n    {\n        vec2 t = tex_coords;\n\n        if (u_flip_x)\n        {\n            t.x = 1.0f - t.x;\n        }\n\n        if (u_flip_y)\n        {\n            t.y = 1.0f - t.y;\n        }\n\n        color = texture (u_image, t * u_offset.zw + u_offset.xy) * u_alpha;\n    }\n    else if (u_type == 1)\n    {\n        color = u_color;\n    }\n    else if (u_type == 2)\n    {\n        float dist = distance (tex_coords, vec2 (.5, .5)) / u_radius;\n\n        color = vec4 (u_intensity * (u_color.xyz / ((dist * dist) + 0.01)),\n                      u_alpha);\n    }\n}\n";
const char* light_vertex = "#version 330 core\nlayout (location = 0) in vec4 a_vertex;\n\nout vec2 tex_coords;\n\nuniform mat4 u_model;\nuniform mat4 u_projection;\n\nvoid main ()\n{\n    tex_coords  = a_vertex.zw;\n    gl_Position = vec4 (a_vertex.xy, 0.0, 1.0);\n}\n";
const char* light_fragment = "#version 330 core\n\nout vec4 color;\n\nin vec2 tex_coords;\n\nuniform int       u_max_lights;\nuniform vec2      u_lights[120];\nuniform sampler2D u_image;\n\nuniform float u_radius    = 0.05;\nuniform float u_intensity = 0.01;\nuniform bool  light_room  = true;\n\nstruct Light\n{\n    float intensity, radius;\n};\n\nvoid main ()\n{\n    vec3 result = texture (u_image, tex_coords).rgb;\n\n    color = vec4 (0, 0, 0, 1.f);\n\n    for (int x = 0; x < u_max_lights; x++)\n    {\n        float dist\n            = distance (tex_coords, vec2 (u_lights[x].x, u_lights[x].y)) / 0.5;\n\n        color += vec4 (u_radius * (result / ((dist * dist) + u_intensity)), 1);\n    }\n\n    if (light_room)\n    {\n        \n    }\n}\n";
#endif